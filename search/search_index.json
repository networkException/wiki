{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 Welcome to the t2linux wiki! This wiki contains knowledge about running Linux on Macs with the T2 chip. A list of those devices can be found on Apple's website . Notable Resources \u00b6 In general you can find most of the people involved on the Linux on T2 Macs (2018+) Discord Server , making it probably the most helpful and important resource of all. Distributions \u00b6 Different distributions are maintained by different people in their own repositories. Ubuntu https://github.com/marcosfad/mbp-ubuntu Fedora https://github.com/mikeeq/mbp-fedora Arch https://github.com/aunali1/linux-mbp-arch Manjaro https://github.com/JPyke3/mbp-manjaro Kernel Modules \u00b6 Support for hardware is cross distro besides patches to the distribution specific kernel. The following repos contain kernel modules for said support. MacBook Bridge / T2 Linux Driver https://github.com/t2linux/apple-bce-drv Touchbar and Ambient Light https://github.com/t2linux/apple-ib-drv Guides and similar \u00b6 Note that if you are using one of the distributions listed above you should follow their install guides rather than the ones listed under this section. However they might still be important to gain a better general picture or to help with specific issues. State of Linux on the MacBook Pro https://github.com/Dunedan/mbp-2016-linux Pulseaudio config files for 16,1 Models https://gist.github.com/kevineinarsson/8e5e92664f97508277fefef1b8015fba Using Luks with the intergrated keyboard https://github.com/DimitriDokuchaev/GrubLuksUnlock Fan control deamon setup https://github.com/networkException/mbpfan Outdated Arch on 2018 MacBook Pro https://gist.github.com/TRPB/437f663b545d23cc8a2073253c774be3 Ubuntu on 2016 MacBook Pro https://gist.github.com/gbrow004/096f845c8fe8d03ef9009fbb87b781a4 Notable Contributors \u00b6 aunali1 (Arch Linux and Kernel Module work) https://github.com/aunali1 MCMrARM (MacBook Bridge / T2 Linux Driver) https://github.com/MCMrARM roadrunner2 (Touchbar and Ambient Light Driver) https://github.com/roadrunner2 mikeeq (Fedora) https://github.com/mikeeq marcosfad (Ubuntu) https://github.com/marcosfad JPyke3 (Manjaro) https://github.com/JPyke3 ... and many more","title":"Home"},{"location":"#introduction","text":"Welcome to the t2linux wiki! This wiki contains knowledge about running Linux on Macs with the T2 chip. A list of those devices can be found on Apple's website .","title":"Introduction"},{"location":"#notable-resources","text":"In general you can find most of the people involved on the Linux on T2 Macs (2018+) Discord Server , making it probably the most helpful and important resource of all.","title":"Notable Resources"},{"location":"#distributions","text":"Different distributions are maintained by different people in their own repositories. Ubuntu https://github.com/marcosfad/mbp-ubuntu Fedora https://github.com/mikeeq/mbp-fedora Arch https://github.com/aunali1/linux-mbp-arch Manjaro https://github.com/JPyke3/mbp-manjaro","title":"Distributions"},{"location":"#kernel-modules","text":"Support for hardware is cross distro besides patches to the distribution specific kernel. The following repos contain kernel modules for said support. MacBook Bridge / T2 Linux Driver https://github.com/t2linux/apple-bce-drv Touchbar and Ambient Light https://github.com/t2linux/apple-ib-drv","title":"Kernel Modules"},{"location":"#guides-and-similar","text":"Note that if you are using one of the distributions listed above you should follow their install guides rather than the ones listed under this section. However they might still be important to gain a better general picture or to help with specific issues. State of Linux on the MacBook Pro https://github.com/Dunedan/mbp-2016-linux Pulseaudio config files for 16,1 Models https://gist.github.com/kevineinarsson/8e5e92664f97508277fefef1b8015fba Using Luks with the intergrated keyboard https://github.com/DimitriDokuchaev/GrubLuksUnlock Fan control deamon setup https://github.com/networkException/mbpfan Outdated Arch on 2018 MacBook Pro https://gist.github.com/TRPB/437f663b545d23cc8a2073253c774be3 Ubuntu on 2016 MacBook Pro https://gist.github.com/gbrow004/096f845c8fe8d03ef9009fbb87b781a4","title":"Guides and similar"},{"location":"#notable-contributors","text":"aunali1 (Arch Linux and Kernel Module work) https://github.com/aunali1 MCMrARM (MacBook Bridge / T2 Linux Driver) https://github.com/MCMrARM roadrunner2 (Touchbar and Ambient Light Driver) https://github.com/roadrunner2 mikeeq (Fedora) https://github.com/mikeeq marcosfad (Ubuntu) https://github.com/marcosfad JPyke3 (Manjaro) https://github.com/JPyke3 ... and many more","title":"Notable Contributors"},{"location":"state/","text":"Introduction \u00b6 While Linux is usable on all T2 models, some features are limited by lack of drivers or similar. This page should give a general overview of what is working and what is not. Working \u00b6 Interal Drive / SSD: Support for the SSD has been upstreamed to the Linux Kernel Screen USB Keyboard Partially Working \u00b6 Trackpad: While technically working, it is far from the experience on macOS Touchbar: There is support for the so called simple mode, the same that you would see on Bootcamp Windows for example. Either kunction keys from 1 to 12 or basic media / brightness control are shown. Audio: With proper configuration audio can work, however it is not stable in some situations and switching speakers and the headphone jack only works manually Wifi: Only works on Models that shipped with macOS Mojave installed as that was the last version to ship with a standard format for firmware binaries Not working \u00b6 TouchID Other \u00b6 File Systems: Linux can't mount APFS partitions nor can macOS mount ext4.","title":"Device Support and State of Features"},{"location":"state/#introduction","text":"While Linux is usable on all T2 models, some features are limited by lack of drivers or similar. This page should give a general overview of what is working and what is not.","title":"Introduction"},{"location":"state/#working","text":"Interal Drive / SSD: Support for the SSD has been upstreamed to the Linux Kernel Screen USB Keyboard","title":"Working"},{"location":"state/#partially-working","text":"Trackpad: While technically working, it is far from the experience on macOS Touchbar: There is support for the so called simple mode, the same that you would see on Bootcamp Windows for example. Either kunction keys from 1 to 12 or basic media / brightness control are shown. Audio: With proper configuration audio can work, however it is not stable in some situations and switching speakers and the headphone jack only works manually Wifi: Only works on Models that shipped with macOS Mojave installed as that was the last version to ship with a standard format for firmware binaries","title":"Partially Working"},{"location":"state/#not-working","text":"TouchID","title":"Not working"},{"location":"state/#other","text":"File Systems: Linux can't mount APFS partitions nor can macOS mount ext4.","title":"Other"},{"location":"distributions/manjaro/building/","text":"Option 1: Docker - All Linux Distros \u00b6 First, you need to ensure that docker isn't using overlay or overlay2 filesystems. This can be verified by running docker info . And will be shown next to Storage Driver . In the event that you are running overlay , Look at this docker documentation on how to switch to VFS. Note, this doesn't work on OSX or Windows, I am working closely with the Manjaro Devs on this one. Quick Docker Install Script - For Linux sh -c \"$(curl -fsSL \"https://raw.githubusercontent.com/JPyke3/mbp-manjaro/master/build-in-docker.sh\")\" Docker Command docker run --privileged \\ -v ~/manjaro-mbp-iso:/root/out \\ -v {PATH-TO-REPO}:/root/iso-profiles\\ --env KERNEL=linux57-mbp\\ --env EDITION=gnome\\ jpyke3/mbp-manjaro-buildiso Command Breakdown \u00b6 --privileged This is required for allowing the filesystems to be created. (This is a security risk! Read for yourself the documentation on this flag) -v Create a folder on your host filesystem to retrieve the compiled files from the container Ensure that {PATH-TO-REPO} is replaced by the absolute path to this repo's files. --env There are two environment variables: KERNEL : This is used for defining which kernel version to use. All packages will follow the -mbp naming scheme. EDITION : This is used for defining which edition of manjaro you would like to install. Option 2: Manually on an existing Manjaro Install \u00b6 First Install Manjaro Tools: pamac install manjaro-tools-iso git Clone the repository to your home directory git clone https://github.com/JPyke3/mbp-manjaro ~/iso-profiles run a command corrisponding to your preferred version of Manjaro: buildiso -f -p {edition} -k linux57-mbp Available Options are: architect gnome kde nxd xfce awesome bspwm-mate cinnamon i3 lxqt openbox webdad bspwm budgie deepin lxde mate ukui File Locations \u00b6 Navigate to the directory for your iso file. If Using a official edition go to: cd /var/cache/manjaro-tools/iso/manjaro/{NAME_OF_EDITION}/20.0.3/ If using a community edition to: cd /var/cache/manjaro-tools/iso/community/{NAME_OF_EDITION}/20.0.3/","title":"Building"},{"location":"distributions/manjaro/building/#option-1-docker-all-linux-distros","text":"First, you need to ensure that docker isn't using overlay or overlay2 filesystems. This can be verified by running docker info . And will be shown next to Storage Driver . In the event that you are running overlay , Look at this docker documentation on how to switch to VFS. Note, this doesn't work on OSX or Windows, I am working closely with the Manjaro Devs on this one. Quick Docker Install Script - For Linux sh -c \"$(curl -fsSL \"https://raw.githubusercontent.com/JPyke3/mbp-manjaro/master/build-in-docker.sh\")\" Docker Command docker run --privileged \\ -v ~/manjaro-mbp-iso:/root/out \\ -v {PATH-TO-REPO}:/root/iso-profiles\\ --env KERNEL=linux57-mbp\\ --env EDITION=gnome\\ jpyke3/mbp-manjaro-buildiso","title":"Option 1: Docker - All Linux Distros"},{"location":"distributions/manjaro/building/#command-breakdown","text":"--privileged This is required for allowing the filesystems to be created. (This is a security risk! Read for yourself the documentation on this flag) -v Create a folder on your host filesystem to retrieve the compiled files from the container Ensure that {PATH-TO-REPO} is replaced by the absolute path to this repo's files. --env There are two environment variables: KERNEL : This is used for defining which kernel version to use. All packages will follow the -mbp naming scheme. EDITION : This is used for defining which edition of manjaro you would like to install.","title":"Command Breakdown"},{"location":"distributions/manjaro/building/#option-2-manually-on-an-existing-manjaro-install","text":"First Install Manjaro Tools: pamac install manjaro-tools-iso git Clone the repository to your home directory git clone https://github.com/JPyke3/mbp-manjaro ~/iso-profiles run a command corrisponding to your preferred version of Manjaro: buildiso -f -p {edition} -k linux57-mbp Available Options are: architect gnome kde nxd xfce awesome bspwm-mate cinnamon i3 lxqt openbox webdad bspwm budgie deepin lxde mate ukui","title":"Option 2: Manually on an existing Manjaro Install"},{"location":"distributions/manjaro/building/#file-locations","text":"Navigate to the directory for your iso file. If Using a official edition go to: cd /var/cache/manjaro-tools/iso/manjaro/{NAME_OF_EDITION}/20.0.3/ If using a community edition to: cd /var/cache/manjaro-tools/iso/community/{NAME_OF_EDITION}/20.0.3/","title":"File Locations"},{"location":"distributions/manjaro/faq/","text":"Installing alongside Windows \u00b6 If you install Manjaro whilst Windows is also installed on your system, Manjaro will use the same Boot entry as the Windows Boot Manager on the MacOS Boot Loader. After clicking on the Windows entry on the MacOS bootloader, you will be taken to systemd-boot, from there you can choose if you would like to boot into Manjaro or use the Windows Boot Manager. Issues Updating Because of the MBP Repository \u00b6 When you update the system, you may recieve errors about my key being corrupted, if that occurs open a terminal and run this sudo pacman-key --recv-key 2BA2DFA128BBD111034F7626C7833DB15753380A --keyserver keyserver.ubuntu.com Switch Touchbar to Function Keys \u00b6 Run this in your terminal: sudo bash -c \"echo 2 > /sys/class/input/*/device/fnmode\"","title":"FAQ"},{"location":"distributions/manjaro/faq/#installing-alongside-windows","text":"If you install Manjaro whilst Windows is also installed on your system, Manjaro will use the same Boot entry as the Windows Boot Manager on the MacOS Boot Loader. After clicking on the Windows entry on the MacOS bootloader, you will be taken to systemd-boot, from there you can choose if you would like to boot into Manjaro or use the Windows Boot Manager.","title":"Installing alongside Windows"},{"location":"distributions/manjaro/faq/#issues-updating-because-of-the-mbp-repository","text":"When you update the system, you may recieve errors about my key being corrupted, if that occurs open a terminal and run this sudo pacman-key --recv-key 2BA2DFA128BBD111034F7626C7833DB15753380A --keyserver keyserver.ubuntu.com","title":"Issues Updating Because of the MBP Repository"},{"location":"distributions/manjaro/faq/#switch-touchbar-to-function-keys","text":"Run this in your terminal: sudo bash -c \"echo 2 > /sys/class/input/*/device/fnmode\"","title":"Switch Touchbar to Function Keys"},{"location":"distributions/manjaro/home/","text":"Welcome to the mbp-manjaro wiki!","title":"Home"},{"location":"distributions/manjaro/installation/","text":"Download a latest release \u00b6 See releases Hardware Requirements \u00b6 USB-C to ethernet cable adapter. Whilst you can install this over WiFi, it would make it alot easier to use an Adapter. If you would like to use the WiFi to set up Manjaro then refer to the \"In order to get WiFi working\" Section after you have booted Manjaro USB-C to USB Adapter Install Procedure \u00b6 Partition your drive in MacOS ready for a linux install. You can either use Disk Utility or use Bootcamp, important thing is, is that you have two partitions (Your MacOS partition and your new linux one) (It isn't recommended that you totally delete MacOS as firmware updates are applied through it). Flash your iso to a USB Stick, If you want a easy way to do this. Use Balena Etcher . For a more command line way of doing this, use dd. Disable MacOS secure boot. Apple's Documentation a. Turn on your Mac, then press and hold Command (\u2318)-R immediately after you see the Apple logo to start up from macOS Recovery. b. When you see the macOS Utilities window, choose Utilities > Startup Security Utility from the menu bar. c. When you're asked to authenticate, click Enter macOS Password, then choose an administrator account and enter its password. d. Set the first option to \"No Security\", and the second to \"Allow booting from External Media\". e. Reboot your Mac. Once Secure boot is diabled, fully shutdown your Computer and Power it on again whilst holding the Option (\u2325) key. Select the yellow EFI System using the arrow keys and hit enter. Scroll down to Boot x86 64 {Your Edition} using the arrow keys and press enter. After booting into Manjaro, open a terminal window and run the following commands: systemctl start systemd-timesyncd.service sudo sed -i 's/https:\\/\\/jacobpyke.xyz/https:\\/\\/mbp-repo.jacobpyke.xyz/' /etc/pacman.conf sudo pacman -R calamares sudo pacman -S calamares-mbp Open the installer and proceed normally until you hit the partitioning stage Click Manual Partitioning Click on /dev/nvme0n1p1 then press edit at the bottom of the install window, change the Change the Mount Point: /boot/efi , after that click okay. Usually, the MacOS partition is mounted to /dev/nvme0n1p2 (Double check this, the Installer should recognize this partition as an Apple APFS Partition). Ignore the MacOS partition. Delete the partition you created before, this is usually mounted to /dev/nvme0n1p3 . These next steps involve partitioning the /boot (boot), / (Root) and /home (Home) partitions of your Linux filesystem, if you know what you are doing feel free to skip to the next step (15). Create a 2000 MiB partition with ext4 as the file system. Change the mount point to /boot and click okay. Create a 51200 MiB partition with ext4 as the file system. Change the mount point to / and click okay. Use the remaining disk space to create an ext4 file system. Change the mount point to /home . Continue the rest of the setup as normal. Once the setup process is complete, restart your computer remembering to remove the install medium once powered off Once again, Power on your computer whilst holding the Option (\u2325) key. Then select EFI Boot Welcome to Manjaro :)","title":"Installation"},{"location":"distributions/manjaro/installation/#download-a-latest-release","text":"See releases","title":"Download a latest release"},{"location":"distributions/manjaro/installation/#hardware-requirements","text":"USB-C to ethernet cable adapter. Whilst you can install this over WiFi, it would make it alot easier to use an Adapter. If you would like to use the WiFi to set up Manjaro then refer to the \"In order to get WiFi working\" Section after you have booted Manjaro USB-C to USB Adapter","title":"Hardware Requirements"},{"location":"distributions/manjaro/installation/#install-procedure","text":"Partition your drive in MacOS ready for a linux install. You can either use Disk Utility or use Bootcamp, important thing is, is that you have two partitions (Your MacOS partition and your new linux one) (It isn't recommended that you totally delete MacOS as firmware updates are applied through it). Flash your iso to a USB Stick, If you want a easy way to do this. Use Balena Etcher . For a more command line way of doing this, use dd. Disable MacOS secure boot. Apple's Documentation a. Turn on your Mac, then press and hold Command (\u2318)-R immediately after you see the Apple logo to start up from macOS Recovery. b. When you see the macOS Utilities window, choose Utilities > Startup Security Utility from the menu bar. c. When you're asked to authenticate, click Enter macOS Password, then choose an administrator account and enter its password. d. Set the first option to \"No Security\", and the second to \"Allow booting from External Media\". e. Reboot your Mac. Once Secure boot is diabled, fully shutdown your Computer and Power it on again whilst holding the Option (\u2325) key. Select the yellow EFI System using the arrow keys and hit enter. Scroll down to Boot x86 64 {Your Edition} using the arrow keys and press enter. After booting into Manjaro, open a terminal window and run the following commands: systemctl start systemd-timesyncd.service sudo sed -i 's/https:\\/\\/jacobpyke.xyz/https:\\/\\/mbp-repo.jacobpyke.xyz/' /etc/pacman.conf sudo pacman -R calamares sudo pacman -S calamares-mbp Open the installer and proceed normally until you hit the partitioning stage Click Manual Partitioning Click on /dev/nvme0n1p1 then press edit at the bottom of the install window, change the Change the Mount Point: /boot/efi , after that click okay. Usually, the MacOS partition is mounted to /dev/nvme0n1p2 (Double check this, the Installer should recognize this partition as an Apple APFS Partition). Ignore the MacOS partition. Delete the partition you created before, this is usually mounted to /dev/nvme0n1p3 . These next steps involve partitioning the /boot (boot), / (Root) and /home (Home) partitions of your Linux filesystem, if you know what you are doing feel free to skip to the next step (15). Create a 2000 MiB partition with ext4 as the file system. Change the mount point to /boot and click okay. Create a 51200 MiB partition with ext4 as the file system. Change the mount point to / and click okay. Use the remaining disk space to create an ext4 file system. Change the mount point to /home . Continue the rest of the setup as normal. Once the setup process is complete, restart your computer remembering to remove the install medium once powered off Once again, Power on your computer whilst holding the Option (\u2325) key. Then select EFI Boot Welcome to Manjaro :)","title":"Install Procedure"},{"location":"distributions/manjaro/wifi-installation/","text":"Step 1 - Installing WiFi firmware files \u00b6 Boot into OSX and run the following in terminal: ioreg -l | grep C-4364 It will show something like: \"RequestedFiles\" = ({\"Firmware\"=\"C-4364__s-B2/kauai.trx\",\"TxCap\"=\"C-4364__s-B2/kauai-X3.txcb\",\"Regulatory\"=\"C-4364__s-B2/kauai-X3.clmb\",\"NVRAM\"=\"C-4364__s-B2/P-kauai-X3_M-HRPN_V-u__m-7.5.txt\"}) | | | | \"images\" = {\"C-4364__s-B2/kauai-X3.txcb\"={\"imagetype\"=\"TxCap\",\"required\"=No,\"imagename\"=\"C-4364__s-B2/kauai-X3.txcb\"},\"C-4364__s-B2/P-kauai-X3_M-HRPN_V-u__m-7.5.txt\"={\"imagetype\"=\"NVRAM\",\"required\"=Yes,\"imagename\"=\"C-4364__s-B2/P-kauai-X3_M-HRPN_V-u__m-7.5.txt\"},\"C-4364__s-B2/kauai-X3.clmb\"={\"imagetype\"=\"Regulatory\",\"required\"=Yes,\"imagename\"=\"C-4364__s-B2/kauai-X3.clmb\"},\"C-4364__s-B2/kauai.trx\"={\"imagetype\"=\"Firmware\",\"required\"=Yes,\"imagename\"=\"C-4364__s-B2/kauai.trx\"}} It'll be different depending on your exact model. There are three files to note down. A .trx (for me: C-4364__s-B2/kauai.trx ), a .clmb (for me: C-4364__s-B2/kauai-X3.clmb and a .txt (for me: C-4364__s-B2/P-kauai-X3_M-HRPN_V-u__m-7.5.txt Look for the corrisponding files in this repository: https://packages.aunali1.com/apple/wifi-fw/18G2022/ (Thank you Aunali1) Boot back into linux and place the files in the following locations: Copy the trx to /lib/firmware/brcm/brcmfmac4364-pcie.bin (e.g. sudo cp kauai.trx /lib/firmware/brcm/brcmfmac4364-pcie.bin ) The clmb to /lib/firmware/brcm/brcmfmac4364-pcie.clm_blob (e.g. sudo cp kauai-X3.clmb /lib/firmware/brcm/brcmfmac4364-pcie.clm_blob ) The txt to something like /lib/firmware/brcm/brcmfmac4364-pcie.Apple Inc.-MacBookPro15,1.txt . You will need to replace 15,1 with your model number. (e.g. sudo cp P-kauai-X3_M-HRPN_V-u__m-7.5.txt /lib/firmware/brcm/brcmfmac4364-pcie.Apple Inc.-MacBookPro15,1.txt ). a. Identifying your MacBook Pro Model or Identifying your MacBook Air Model Credit to @mikeeq for the write up. Step 2 - Installing IWD \u00b6 sudo pacman -S iwd wifi-fix-mbp systemctl stop wpa_supplicant systemctl mask wpa_supplicant sudo nano /etc/NetworkManager/NetworkManager.conf paste in this at the end: [device] wifi.backend=iwd Run: systemctl enable iwd systemctl enable wifi-fix.service then reboot.","title":"Wifi Installation"},{"location":"distributions/manjaro/wifi-installation/#step-1-installing-wifi-firmware-files","text":"Boot into OSX and run the following in terminal: ioreg -l | grep C-4364 It will show something like: \"RequestedFiles\" = ({\"Firmware\"=\"C-4364__s-B2/kauai.trx\",\"TxCap\"=\"C-4364__s-B2/kauai-X3.txcb\",\"Regulatory\"=\"C-4364__s-B2/kauai-X3.clmb\",\"NVRAM\"=\"C-4364__s-B2/P-kauai-X3_M-HRPN_V-u__m-7.5.txt\"}) | | | | \"images\" = {\"C-4364__s-B2/kauai-X3.txcb\"={\"imagetype\"=\"TxCap\",\"required\"=No,\"imagename\"=\"C-4364__s-B2/kauai-X3.txcb\"},\"C-4364__s-B2/P-kauai-X3_M-HRPN_V-u__m-7.5.txt\"={\"imagetype\"=\"NVRAM\",\"required\"=Yes,\"imagename\"=\"C-4364__s-B2/P-kauai-X3_M-HRPN_V-u__m-7.5.txt\"},\"C-4364__s-B2/kauai-X3.clmb\"={\"imagetype\"=\"Regulatory\",\"required\"=Yes,\"imagename\"=\"C-4364__s-B2/kauai-X3.clmb\"},\"C-4364__s-B2/kauai.trx\"={\"imagetype\"=\"Firmware\",\"required\"=Yes,\"imagename\"=\"C-4364__s-B2/kauai.trx\"}} It'll be different depending on your exact model. There are three files to note down. A .trx (for me: C-4364__s-B2/kauai.trx ), a .clmb (for me: C-4364__s-B2/kauai-X3.clmb and a .txt (for me: C-4364__s-B2/P-kauai-X3_M-HRPN_V-u__m-7.5.txt Look for the corrisponding files in this repository: https://packages.aunali1.com/apple/wifi-fw/18G2022/ (Thank you Aunali1) Boot back into linux and place the files in the following locations: Copy the trx to /lib/firmware/brcm/brcmfmac4364-pcie.bin (e.g. sudo cp kauai.trx /lib/firmware/brcm/brcmfmac4364-pcie.bin ) The clmb to /lib/firmware/brcm/brcmfmac4364-pcie.clm_blob (e.g. sudo cp kauai-X3.clmb /lib/firmware/brcm/brcmfmac4364-pcie.clm_blob ) The txt to something like /lib/firmware/brcm/brcmfmac4364-pcie.Apple Inc.-MacBookPro15,1.txt . You will need to replace 15,1 with your model number. (e.g. sudo cp P-kauai-X3_M-HRPN_V-u__m-7.5.txt /lib/firmware/brcm/brcmfmac4364-pcie.Apple Inc.-MacBookPro15,1.txt ). a. Identifying your MacBook Pro Model or Identifying your MacBook Air Model Credit to @mikeeq for the write up.","title":"Step 1 - Installing WiFi firmware files"},{"location":"distributions/manjaro/wifi-installation/#step-2-installing-iwd","text":"sudo pacman -S iwd wifi-fix-mbp systemctl stop wpa_supplicant systemctl mask wpa_supplicant sudo nano /etc/NetworkManager/NetworkManager.conf paste in this at the end: [device] wifi.backend=iwd Run: systemctl enable iwd systemctl enable wifi-fix.service then reboot.","title":"Step 2 - Installing IWD"},{"location":"guides/wifi/","text":"Introduction \u00b6 This page is a step by step guide to get wifi working on supported models. Note that currently only Macs that came with macOS Mojave preinstalled are supported, see Device Support and State of Features . On macOS \u00b6 Run both ioreg -l | grep RequestedFiles and system_profiler SPHardwareDataType | grep \"Model Identifier\" in a terminal and note down the output. On Linux \u00b6 Look at the ouput of the first command listed above, it will probably look something like this \"RequestedFiles\" = ( { \"Firmware\" = \"C-4364s-B2/kauai.trx\" , \"TxCap\" = \"C-4364s-B2/kauai-X3.txcb\" , \"Regulatory\" = \"C-4364s-B2/kauai-X3.clmb\" , \"NVRAM\" = \"C-4364s-B2/P-kauai-X3_M-HRPN_V-u__m-7.5.txt\" } ) Navigate to https://dl.t2linux.org/apple/wifi-fw/18G2022/ . Look at the path of the file in the command output that ends in .trx . On the website, download that file and rename it to brcmfmac4364-pcie.bin . Do the same for the .clmb file and rename it to brcmfmac4364-pcie.clm_blob . In the end, download the .txt file and rename it to brcmfmac4364-pcie.Apple Inc.-MacBookPro15,1.txt but change the 15,1 in this string to model identifier was the output of the second command described here . Now that you got those 3 files, move them to /lib/firmware/brcm/ . You can now test out if the files work by running sudo modprobe -r brcmfmac && sudo modprobe brcmfmac and looking at the list of wifi access points nearby. Note: From this point on the instructions might be different for a distribution that you are trying to install. To get WPA2 to work stably, install the iwd package (for example sudo apt install iwd on Ubuntu). Edit /etc/NetworkManager/NetworkManager.conf to look like the following: [device] wifi.backend = iwd Set iwd to run on boot with the following commands (assuming that you are using systemd) sudo systemctl enable iwd sudo systemctl start iwd sudo systemctl restart NetworkManager If you wifi disconnects or has issues otherwise its advises to restart iwd: sudo systemctl restart iwd","title":"Wifi"},{"location":"guides/wifi/#introduction","text":"This page is a step by step guide to get wifi working on supported models. Note that currently only Macs that came with macOS Mojave preinstalled are supported, see Device Support and State of Features .","title":"Introduction"},{"location":"guides/wifi/#on-macos","text":"Run both ioreg -l | grep RequestedFiles and system_profiler SPHardwareDataType | grep \"Model Identifier\" in a terminal and note down the output.","title":"On macOS"},{"location":"guides/wifi/#on-linux","text":"Look at the ouput of the first command listed above, it will probably look something like this \"RequestedFiles\" = ( { \"Firmware\" = \"C-4364s-B2/kauai.trx\" , \"TxCap\" = \"C-4364s-B2/kauai-X3.txcb\" , \"Regulatory\" = \"C-4364s-B2/kauai-X3.clmb\" , \"NVRAM\" = \"C-4364s-B2/P-kauai-X3_M-HRPN_V-u__m-7.5.txt\" } ) Navigate to https://dl.t2linux.org/apple/wifi-fw/18G2022/ . Look at the path of the file in the command output that ends in .trx . On the website, download that file and rename it to brcmfmac4364-pcie.bin . Do the same for the .clmb file and rename it to brcmfmac4364-pcie.clm_blob . In the end, download the .txt file and rename it to brcmfmac4364-pcie.Apple Inc.-MacBookPro15,1.txt but change the 15,1 in this string to model identifier was the output of the second command described here . Now that you got those 3 files, move them to /lib/firmware/brcm/ . You can now test out if the files work by running sudo modprobe -r brcmfmac && sudo modprobe brcmfmac and looking at the list of wifi access points nearby. Note: From this point on the instructions might be different for a distribution that you are trying to install. To get WPA2 to work stably, install the iwd package (for example sudo apt install iwd on Ubuntu). Edit /etc/NetworkManager/NetworkManager.conf to look like the following: [device] wifi.backend = iwd Set iwd to run on boot with the following commands (assuming that you are using systemd) sudo systemctl enable iwd sudo systemctl start iwd sudo systemctl restart NetworkManager If you wifi disconnects or has issues otherwise its advises to restart iwd: sudo systemctl restart iwd","title":"On Linux"}]}